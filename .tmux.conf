# My config file for tmux


# turn the status bar off
#set-option -g status off

# for italics support
#set -g default-terminal "screen-it"
#set -g default-terminal "screen-256color"
set -g default-terminal "rxvt-unicode-256color"
#if '[ -n "$DISPLAY" ]' 'set -g default-terminal "rxvt-unicode-256color"'
#if '[ "$DISPLAY" == "" ]' 'set -g default-terminal "linux"'
#if '[ -z "$DISPLAY" ]' 'set default-terminal "xterm"'
if '[ -z "$DISPLAY" ]' 'set -g default-terminal "linux"'

# lock after this time
#set -g lock-after-time 1800

# Default global window options.
#setw -g remain-on-exit on
setw -g window-status-current-attr "underscore"

# to make ctrl-arrow, etc. work
#unbind C-Left
#unbind C-Right
set-window-option -g xterm-keys on 

# scrollback buffer n lines
set -g history-limit 10000

# listen for activity on all windows
set -g bell-action any

# on-screen time for display-panes in ms
set -g display-panes-time 2000

# start window indexing at one instead of zero
set -g base-index 1

# enable wm window titles
set -g set-titles on
# wm window title string (uses statusbar variables)
#set -g set-titles-string "tmux.#I.#W"
#set-option -g set-titles-string '[#S:#I #H] #W'
#set-window-option -g automatic-rename on

# Set the esc/alt disambiguation timeout to 50ms. The default is half a second,
# which makes vim kind of painful
set-option -sg escape-time 0
#set-option -sg escape-time 50

# shift pg up and down
#set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# Enable mouse support in ~/.tmux.conf
set-option -g mouse-select-pane on
set-option -g mouse-select-window on
set-window-option -g mode-mouse on

# for window size
setw -g aggressive-resize on

# statusbar --------------------------------------------------------------

set -g display-time 2000

# move to the top
set-option -g status-position top 
#set-option -g status-position bottom

# default statusbar colors
set -g status-fg white
set -g status-bg black
set -g status-attr default
#set -g status-fg black
#set -g status-bg 7
#set -g status-attr default

# Left shows the session name, in blue
#set -g status-left-bg default
#set -g status-left-fg blue

# default window title colors
set-window-option -g window-status-fg 8 
set-window-option -g window-status-bg default
set-window-option -g window-status-attr dim
#set-window-option -g window-status-fg black
#set-window-option -g window-status-bg 7
#set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-fg white
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-attr bright
#set-window-option -g window-status-current-fg black
#set-window-option -g window-status-current-bg 7
#set-window-option -g window-status-current-attr bright

# command/message line colors
set -g message-fg white
set -g message-bg black
set -g message-attr bright
#set -g message-fg black
#set -g message-bg 7
#set -g message-attr bright

# pane colors
#set -g pane-border-fg colour240
set -g pane-border-fg colour8
#set -g pane-active-border-fg colour244
set -g pane-active-border-fg colour8

# center align the window list
#set -g status-justify centre

# show some useful stats but only when tmux is started 
# outside of Xorg, otherwise panel shows these already
set -g status-right ""
set -g status-left ""

#if '[ -z "$DISPLAY" ]' 'set -g status-fg black'
#if '[ -z "$DISPLAY" ]' 'set -g status-bg green'
#if '[ -z "$DISPLAY" ]' 'set-window-option -g window-status-fg red'
#if '[ -z "$DISPLAY" ]' 'set-window-option -g window-status-attr bright'
#if '[ -z "$DISPLAY" ]' 'set-window-option -g window-status-current-fg green'
#if '[ -z "$DISPLAY" ]' 'set-window-option -g window-status-current-attr bright'

# powerline tmux statusline, overrides some of the settings above...
source "$HOME/.local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf"

if '[ -z "$DISPLAY" ]' 'set -g status-left "[#[fg=green] #H #[default]]"'
if '[ -z "$DISPLAY" ]' 'set -g status-right "[ #[fg=magenta]#(cat /proc/loadavg | cut -d \" \" -f 1,2,3)#[default] ][ #[fg=cyan,bright]%a %Y-%m-%d %H:%M #[default]]"'
if '[ -z "$DISPLAY" ]' 'set -g status-right-length 50'

# statusbar end --------------------------------------------------------------


##############################################################################
# Based on
# By Nicholas Marriott. Public domain.
#
# This configuration file binds many of the common GNU screen key bindings to
# appropriate tmux key bindings. Note that for some key bindings there is no
# tmux analogue and also that this set omits binding some commands available in
# tmux but not in screen.
#
# Note this is only a selection of key bindings and they are in addition to the
# normal tmux key bindings. This is intended as an example not as to be used
# as-is.

# Set the prefix to ^S.
unbind C-b
#set -g prefix A-Escape
set -g prefix ^S
#set -g prefix ^A
bind a send-prefix

# Bind appropriate commands similar to screen.
# lockscreen ^X x 
unbind ^X
bind ^X lock-server
unbind x
bind x lock-server

# screen ^C c 
#unbind ^C
#bind ^C new-window
unbind c
bind c new-window

# detach ^D d
unbind ^D
bind ^D detach

# displays * 
unbind *
bind * list-clients

# next ^@ ^N sp n 
unbind ^@
bind ^@ next-window
unbind ^N
bind ^N next-window
unbind " "
bind " " next-window
unbind n
bind n next-window

# title A
unbind A
bind A command-prompt "rename-window %%"

# other ^A
unbind ^A
bind ^A last-window
unbind l
bind l last-window

# prev ^H ^P p ^? 
unbind ^H
bind ^H previous-window
unbind ^P
bind ^P previous-window
unbind N
bind N previous-window
unbind BSpace
bind BSpace previous-window

# windows ^W w 
unbind ^W
bind ^W list-windows
unbind w
bind w list-windows

# quit \ 
unbind-key '\'
bind '\' confirm-before "kill-server"

# kill K k 
unbind K
bind K confirm-before "kill-window"
unbind k
bind k confirm-before "kill-window"

# redisplay ^L l 
unbind ^R
bind ^R refresh-client
#unbind l
#bind l refresh-client

# :kB: focus up
unbind Tab
bind Tab select-pane -t:.+
unbind BTab
bind BTab select-pane -t:.-

##############################################################################


##############################################################################
# Based on
# vim-keys.conf, v1.2 2010/09/12
# By Daniel Thau.  Public domain.
#
# This configuration part binds many vi- and vim-like bindings to the
# appropriate tmux key bindings.  Note that for many key bindings there is no
# tmux analogue.  This is intended for tmux 1.3, which handles pane selection
# differently from the previous versions

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
#bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 1
bind > resize-pane -R 1
bind - resize-pane -D 1
bind + resize-pane -U 1

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# vi-style controls for copy mode
setw -g mode-keys vi

unbind [
bind Escape copy-mode
#bind-key -n C-y copy-mode

unbind p
bind p paste-buffer
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection

##############################################################################

##############################################################################
# custom shortcuts

# toggle statusbar
bind-key b set-option status

# rxvt-tabbed like shortcuts
bind-key -n S-down new-window
bind-key -n S-right next
bind-key -n S-left prev
bind-key -n S-up last-window

# open a man page in new window
bind / command-prompt "split-window 'exec man %%'"

# quick view of processes
bind '~' split-window "exec htop"

# Keys to switch session.
bind Q switchc -t0
bind W switchc -t1
bind E switchc -t2

# source the file quickly
bind r source-file ~/.tmux.conf

# Bind function keys.
bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8

# Other key bindings.
#bind F1 selectw -t:10
#bind F2 selectw -t:11
#bind F3 selectw -t:12
#bind F4 selectw -t:13
#bind F5 selectw -t:14
#bind F6 selectw -t:15
#bind F7 selectw -t:16
#bind F8 selectw -t:17
#bind F9 selectw -t:18
#bind F10 selectw -t:19
#bind F11 selectw -t:20
#bind F12 selectw -t:21
#

##CLIPBOARD selection integration
##Requires prefix key before the command key
#Copy tmux paste buffer to CLIPBOARD
unbind C-c
#bind C-c run "tmux show-buffer | xclip -i -selection clipboard"
bind C-c run "tmux show-buffer | xsel -i -b"
#Copy CLIPBOARD to tmux paste buffer and paste tmux paste buffer
#bind C-v run "tmux set-buffer -- \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"
bind C-v run "tmux set-buffer -- \"$(xsel -o -b)\"; tmux paste-buffer"

# windowlist
#unbind '"'
#bind '"' choose-window
unbind C-f
bind C-f choose-window
#bind-key -n C-f choose-window

# sessionlist
#unbind '"'
unbind C-g
bind C-g choose-session
#bind-key -n C-g choose-session

# window movement / renumbering like in screen's :number
bind-key m command-prompt -p "move window to:"  "swap-window -t '%%'"
# to the top
unbind T
bind T swap-window -t 0

##############################################################################

# session initialization
#new -s mysession mutt
#neww -t 2
#neww -d -t 3
#neww -d -t 5 mocp
#neww -d -t 6 rtorrent
#selectw -t 1

# initialize sessions
#bind F source-file ~/.tmux/foo
#bind B source-file ~/.tmux/bar

#bind-key R respawn-window

# create a session with a throw-away window
#new true

# for future windows, stay open after the command exits
#set set-remain-on-exit on

# create the windows we really want
#neww -n estruct ls
#neww -n estruct2 ls
#splitw -v -p 50 -t 0 cd /home/

# for future windows, revert r-o-e to global value
#set -u set-remain-on-exit

#if '[ -z "$DISPLAY" ]' 'set-option -g status on'
#if '[ -z "$DISPLAY" ]' 'set-option -g status-interval 2'
#if '[ -z "$DISPLAY" ]' 'set-option -g status-utf8 on'
#if '[ -z "$DISPLAY" ]' 'set-option -g status-justify "centre"'
#if '[ -z "$DISPLAY" ]' 'set-option -g status-left-length 60'
#if '[ -z "$DISPLAY" ]' 'set-option -g status-right-length 90'
#if '[ -z "$DISPLAY" ]' 'set-option -g status-left "#(/home/mel/bin/program-files/tmux-powerline/status-left.sh)"'
#if '[ -z "$DISPLAY" ]' 'set-option -g status-right "#(/home/mel/bin/program-files/tmux-powerline/status-right.sh)"'

#set-option -g status on
#set-option -g status-interval 2
#set-option -g status-utf8 on
#set-option -g status-justify "centre"
#set-option -g status-left-length 60
#set-option -g status-right-length 90
#set-option -g status-left "#(/home/mel/bin/program-files/tmux-powerline/status-left.sh)"
#set-option -g status-right "#(/home/mel/bin/program-files/tmux-powerline/status-right.sh)"

set -g update-environment "SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION"
